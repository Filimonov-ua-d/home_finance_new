// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Filimonov-ua-d/home_finance_new/finances (interfaces: UseCase)

// Package mock_finances is a generated GoMock package.
package mock_finances

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/Filimonov-ua-d/home_finance_new/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetExpences mocks base method.
func (m *MockUseCase) GetExpences(arg0 context.Context) ([]*models.ExpensesItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpences", arg0)
	ret0, _ := ret[0].([]*models.ExpensesItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpences indicates an expected call of GetExpences.
func (mr *MockUseCaseMockRecorder) GetExpences(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpences", reflect.TypeOf((*MockUseCase)(nil).GetExpences), arg0)
}

// GetMoneyOnDate mocks base method.
func (m *MockUseCase) GetMoneyOnDate(arg0 context.Context, arg1 time.Time) ([]*models.MoneyItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoneyOnDate", arg0, arg1)
	ret0, _ := ret[0].([]*models.MoneyItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoneyOnDate indicates an expected call of GetMoneyOnDate.
func (mr *MockUseCaseMockRecorder) GetMoneyOnDate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoneyOnDate", reflect.TypeOf((*MockUseCase)(nil).GetMoneyOnDate), arg0, arg1)
}

// InsertCredit mocks base method.
func (m *MockUseCase) InsertCredit(arg0 context.Context, arg1 *models.Credit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCredit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCredit indicates an expected call of InsertCredit.
func (mr *MockUseCaseMockRecorder) InsertCredit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCredit", reflect.TypeOf((*MockUseCase)(nil).InsertCredit), arg0, arg1)
}

// InsertDeposit mocks base method.
func (m *MockUseCase) InsertDeposit(arg0 context.Context, arg1 *models.Deposit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDeposit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDeposit indicates an expected call of InsertDeposit.
func (mr *MockUseCaseMockRecorder) InsertDeposit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDeposit", reflect.TypeOf((*MockUseCase)(nil).InsertDeposit), arg0, arg1)
}

// InsertExpense mocks base method.
func (m *MockUseCase) InsertExpense(arg0 context.Context, arg1 *models.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertExpense", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertExpense indicates an expected call of InsertExpense.
func (mr *MockUseCaseMockRecorder) InsertExpense(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertExpense", reflect.TypeOf((*MockUseCase)(nil).InsertExpense), arg0, arg1)
}

// InsertExpensesItem mocks base method.
func (m *MockUseCase) InsertExpensesItem(arg0 context.Context, arg1 *models.ExpensesItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertExpensesItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertExpensesItem indicates an expected call of InsertExpensesItem.
func (mr *MockUseCaseMockRecorder) InsertExpensesItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertExpensesItem", reflect.TypeOf((*MockUseCase)(nil).InsertExpensesItem), arg0, arg1)
}

// InsertProfit mocks base method.
func (m *MockUseCase) InsertProfit(arg0 context.Context, arg1 *models.Profit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProfit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProfit indicates an expected call of InsertProfit.
func (mr *MockUseCaseMockRecorder) InsertProfit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProfit", reflect.TypeOf((*MockUseCase)(nil).InsertProfit), arg0, arg1)
}

// InsertSalary mocks base method.
func (m *MockUseCase) InsertSalary(arg0 context.Context, arg1 *models.Salary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSalary", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSalary indicates an expected call of InsertSalary.
func (mr *MockUseCaseMockRecorder) InsertSalary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSalary", reflect.TypeOf((*MockUseCase)(nil).InsertSalary), arg0, arg1)
}
