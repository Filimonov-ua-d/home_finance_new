// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Filimonov-ua-d/home_finance_new/finances (interfaces: Repository)

// Package mock_finances is a generated GoMock package.
package mock_finances

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/Filimonov-ua-d/home_finance_new/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetExpences mocks base method.
func (m *MockRepository) GetExpences(arg0 context.Context) ([]*models.ExpensesItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpences", arg0)
	ret0, _ := ret[0].([]*models.ExpensesItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpences indicates an expected call of GetExpences.
func (mr *MockRepositoryMockRecorder) GetExpences(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpences", reflect.TypeOf((*MockRepository)(nil).GetExpences), arg0)
}

// GetMoney mocks base method.
func (m *MockRepository) GetMoney(arg0 context.Context, arg1 time.Time) ([]*models.MoneyItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoney", arg0, arg1)
	ret0, _ := ret[0].([]*models.MoneyItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoney indicates an expected call of GetMoney.
func (mr *MockRepositoryMockRecorder) GetMoney(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoney", reflect.TypeOf((*MockRepository)(nil).GetMoney), arg0, arg1)
}

// InsertCredit mocks base method.
func (m *MockRepository) InsertCredit(arg0 context.Context, arg1 *models.Credit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCredit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCredit indicates an expected call of InsertCredit.
func (mr *MockRepositoryMockRecorder) InsertCredit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCredit", reflect.TypeOf((*MockRepository)(nil).InsertCredit), arg0, arg1)
}

// InsertDeposit mocks base method.
func (m *MockRepository) InsertDeposit(arg0 context.Context, arg1 *models.Deposit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDeposit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDeposit indicates an expected call of InsertDeposit.
func (mr *MockRepositoryMockRecorder) InsertDeposit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDeposit", reflect.TypeOf((*MockRepository)(nil).InsertDeposit), arg0, arg1)
}

// InsertExpense mocks base method.
func (m *MockRepository) InsertExpense(arg0 context.Context, arg1 *models.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertExpense", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertExpense indicates an expected call of InsertExpense.
func (mr *MockRepositoryMockRecorder) InsertExpense(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertExpense", reflect.TypeOf((*MockRepository)(nil).InsertExpense), arg0, arg1)
}

// InsertExpensesItem mocks base method.
func (m *MockRepository) InsertExpensesItem(arg0 context.Context, arg1 *models.ExpensesItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertExpensesItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertExpensesItem indicates an expected call of InsertExpensesItem.
func (mr *MockRepositoryMockRecorder) InsertExpensesItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertExpensesItem", reflect.TypeOf((*MockRepository)(nil).InsertExpensesItem), arg0, arg1)
}

// InsertProfit mocks base method.
func (m *MockRepository) InsertProfit(arg0 context.Context, arg1 *models.Profit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProfit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProfit indicates an expected call of InsertProfit.
func (mr *MockRepositoryMockRecorder) InsertProfit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProfit", reflect.TypeOf((*MockRepository)(nil).InsertProfit), arg0, arg1)
}

// InsertSalary mocks base method.
func (m *MockRepository) InsertSalary(arg0 context.Context, arg1 *models.Salary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSalary", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSalary indicates an expected call of InsertSalary.
func (mr *MockRepositoryMockRecorder) InsertSalary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSalary", reflect.TypeOf((*MockRepository)(nil).InsertSalary), arg0, arg1)
}
